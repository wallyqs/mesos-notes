#+TITLE:	Command Scheduler in Go: Docker Version
#+startup:	showeverything

Example of using ContainerInfo as well.

*** DONE License

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#+END_SRC

*** DONE Imports

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go
package main

import (
	"fmt"
	"flag"
	"net"
	"strconv"

	"github.com/gogo/protobuf/proto"
	mesos "github.com/mesos/mesos-go/mesosproto"
	util "github.com/mesos/mesos-go/mesosutil"
	sched "github.com/mesos/mesos-go/scheduler"
)
#+END_SRC

*** DONE Definitions

These values will be defined during the =init= step by parsing the flags
and later on used in =main=.

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go

const (
	CPUS_PER_TASK       = 1
	MEM_PER_TASK        = 128
)

var (
	address		= flag.String("address", "127.0.0.1", "Binding address")
	master          = flag.String("master", "127.0.0.1:5050", "Master address <ip:port>")
	taskCount       = flag.Int("task-count", 5, "Total task count to run.")
        jobCmd		= flag.String("cmd", "while true; do echo 'hello world'; date; sleep 1; done", "Command to execute")
	dockerImage     = flag.String("i", "ubuntu", "Docker Image to execute")
)

#+END_SRC

*** DONE Types

**** DockerCommandScheduler

***** Type

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go

type DockerCommandScheduler struct {
	tasksLaunched int
	tasksFinished int
	totalTasks    int
}

#+END_SRC

***** Functions

****** Registered

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go
func (sched *DockerCommandScheduler) Registered(driver sched.SchedulerDriver, frameworkId *mesos.FrameworkID, masterInfo *mesos.MasterInfo) {
	fmt.Println("Framework Registered with Master ", masterInfo)
}
#+END_SRC

****** Reregistered

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go
func (sched *DockerCommandScheduler) Reregistered(driver sched.SchedulerDriver, masterInfo *mesos.MasterInfo) {
	fmt.Println("Framework Re-Registered with Master ", masterInfo)
}
#+END_SRC

****** Disconnected

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go
func (sched *DockerCommandScheduler) Disconnected(sched.SchedulerDriver) {}
#+END_SRC

****** ResourceOffers

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go
func (sched *DockerCommandScheduler) ResourceOffers(driver sched.SchedulerDriver, offers []*mesos.Offer) {

	for _, offer := range offers {
		cpuResources := util.FilterResources(offer.Resources, func(res *mesos.Resource) bool {
			return res.GetName() == "cpus"
		})
		cpus := 0.0
		for _, res := range cpuResources {
			cpus += res.GetScalar().GetValue()
		}

		memResources := util.FilterResources(offer.Resources, func(res *mesos.Resource) bool {
			return res.GetName() == "mem"
		})
		mems := 0.0
		for _, res := range memResources {
			mems += res.GetScalar().GetValue()
		}

		fmt.Println("Received Offer <", offer.Id.GetValue(), "> with cpus=", cpus, " mem=", mems)

		remainingCpus := cpus
		remainingMems := mems

		var tasks []*mesos.TaskInfo
		for sched.tasksLaunched < sched.totalTasks &&
			CPUS_PER_TASK <= remainingCpus &&
			MEM_PER_TASK <= remainingMems {

			sched.tasksLaunched++

			taskId := &mesos.TaskID{
				Value: proto.String(strconv.Itoa(sched.tasksLaunched)),
			}

			task := &mesos.TaskInfo{
				Name:     proto.String("go-cmd-task-" + taskId.GetValue()),
				TaskId:   taskId,
				SlaveId:  offer.SlaveId,
				// Executor: sched.executor,
				Resources: []*mesos.Resource{
					util.NewScalarResource("cpus", CPUS_PER_TASK),
					util.NewScalarResource("mem", MEM_PER_TASK),
				},
			        Command: &mesos.CommandInfo{
				 	Value: proto.String(*jobCmd),
				},
				Container: &mesos.ContainerInfo{
				        Type: mesos.ContainerInfo_DOCKER.Enum(),
				        Docker: &mesos.ContainerInfo_DockerInfo{
						Image: proto.String(*dockerImage),
						// Network: mesos.ContainerInfo_DockerInfo_BRIDGE.Enum(),
						// PortMappings: []*ContainerInfo_DockerInfo_PortMapping{},
					},
				},
			}
			fmt.Printf("Prepared task: %s with offer %s for launch\n", task.GetName(), offer.Id.GetValue())

			tasks = append(tasks, task)
			remainingCpus -= CPUS_PER_TASK
			remainingMems -= MEM_PER_TASK
		}
		fmt.Println("Launching ", len(tasks), "tasks for offer", offer.Id.GetValue())
		driver.LaunchTasks([]*mesos.OfferID{offer.Id}, tasks, &mesos.Filters{RefuseSeconds: proto.Float64(1)})
	}
}

#+END_SRC

****** StatusUpdate

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go
func (sched *DockerCommandScheduler) StatusUpdate(driver sched.SchedulerDriver, status *mesos.TaskStatus) {
	fmt.Println("Status update: task", status.TaskId.GetValue(), " is in state ", status.State.Enum().String())
	if status.GetState() == mesos.TaskState_TASK_FINISHED {
		sched.tasksFinished++
	}

	if sched.tasksFinished >= sched.totalTasks {
		fmt.Println("Total tasks completed, stopping framework.")
		driver.Stop(false)
	}

	if status.GetState() == mesos.TaskState_TASK_LOST ||
		status.GetState() == mesos.TaskState_TASK_KILLED ||
		status.GetState() == mesos.TaskState_TASK_FAILED {
		fmt.Println(
			"Aborting because task", status.TaskId.GetValue(),
			"is in unexpected state", status.State.String(),
			"with message", status.GetMessage(),
		)
		driver.Abort()
	}
}

#+END_SRC

****** OfferRescinded

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go
func (sched *DockerCommandScheduler) OfferRescinded(sched.SchedulerDriver, *mesos.OfferID) {}

#+END_SRC

****** FrameworkMessage

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go
func (sched *DockerCommandScheduler) FrameworkMessage(sched.SchedulerDriver, *mesos.ExecutorID, *mesos.SlaveID, string) {
}
#+END_SRC

****** SlaveLost

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go
func (sched *DockerCommandScheduler) SlaveLost(sched.SchedulerDriver, *mesos.SlaveID) {}
#+END_SRC

****** ExecutorLost

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go
func (sched *DockerCommandScheduler) ExecutorLost(sched.SchedulerDriver, *mesos.ExecutorID, *mesos.SlaveID, int) {
}
#+END_SRC

****** Error

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go
func (sched *DockerCommandScheduler) Error(driver sched.SchedulerDriver, err string) {
	fmt.Println("Scheduler received error:", err)
}
#+END_SRC

*** DONE Functions

**** init

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go

func init() {
	flag.Parse()
	fmt.Println("Initializing the Command Scheduler...")
}

#+END_SRC

**** parseIP

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go

func parseIP(address string) net.IP {
	addr, err := net.LookupIP(address)
	if err != nil {
		fmt.Println(err)
	}
	if len(addr) < 1 {
		fmt.Printf("failed to parse IP from address '%v'", address)
	}
	return addr[0]
}

#+END_SRC
*** DONE Main

#+BEGIN_SRC go :tangle src/github.com/mesos/mesos-go/examples/command_docker_scheduler.go

func main() {

	fwinfo := &mesos.FrameworkInfo{
		User: proto.String(""),
		Name: proto.String("Go Docker Command Scheduler"),
	}

	bindingAddress := parseIP(*address)

	config := sched.DriverConfig{
		Scheduler:      &DockerCommandScheduler{
		  tasksLaunched: 0,
		  tasksFinished: 0,
		  totalTasks:    *taskCount,
		},
		Framework:      fwinfo,
		Master:         *master,
		BindingAddress: bindingAddress,
	}
	driver, err := sched.NewMesosSchedulerDriver(config)

	if err != nil {
		fmt.Println("Unable to create a SchedulerDriver ", err.Error())
	}

	if stat, err := driver.Run(); err != nil {
		fmt.Printf("Framework stopped with status %s and error: %s\n", stat.String(), err.Error())
	}

}

#+END_SRC

*** DONE Compile and run

#+name: compile-framework
#+BEGIN_SRC sh  :results output :tangle run-framework.sh
export GOPATH="`pwd`"
cd src/github.com/mesos/mesos-go
go run examples/command_docker_scheduler.go -address="192.168.0.7" -master="192.168.0.7:5050" -logtostderr=true -taskCount 10 -i="ubuntu"
#+END_SRC

***** Example Docker inspect

#+BEGIN_SRC js
sudo docker inspect 0de8d14b63bc
[{
    "Args": [
        "-c",
        "while true; do echo usingdockeeeeeeerrrrrrrrrrrrrrrrrrrr; sleep 1; done"
    ],
    "Config": {
        "AttachStderr": false,
        "AttachStdin": false,
        "AttachStdout": false,
        "Cmd": [
            "-c",
            "while true; do echo usingdockeeeeeeerrrrrrrrrrrrrrrrrrrr; sleep 1; done"
        ],
        "CpuShares": 1024,
        "Cpuset": "",
        "Domainname": "",
        "Entrypoint": [
            "/bin/sh"
        ],
        "Env": [
            "MESOS_SANDBOX=/mnt/mesos/sandbox",
            "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        ],
        "ExposedPorts": null,
        "Hostname": "wally-nyc",
        "Image": "ubuntu",
        "Memory": 134217728,
        "MemorySwap": -1,
        "NetworkDisabled": false,
        "OnBuild": null,
        "OpenStdin": false,
        "PortSpecs": null,
        "SecurityOpt": null,
        "StdinOnce": false,
        "Tty": false,
        "User": "",
        "Volumes": null,
        "WorkingDir": ""
    },
    "Created": "2015-02-25T14:41:33.529506321Z",
    "Driver": "aufs",
    "ExecDriver": "native-0.2",
    "HostConfig": {
        "Binds": [
            "/tmp/mesos/slaves/20150223-223304-117483712-5050-29395-S0/frameworks/20150225-174751-117483712-5050-13334-0011/executors/1/runs/ae96f8cc-e297-4ccc-836f-3fb3c7698ca1:/mnt/mesos/sandbox"
        ],
        "CapAdd": null,
        "CapDrop": null,
        "ContainerIDFile": "",
        "Devices": [],
        "Dns": null,
        "DnsSearch": null,
        "ExtraHosts": null,
        "Links": null,
        "LxcConf": [],
        "NetworkMode": "host",
        "PortBindings": {},
        "Privileged": false,
        "PublishAllPorts": false,
        "RestartPolicy": {
            "MaximumRetryCount": 0,
            "Name": ""
        },
        "VolumesFrom": null
    },
    "HostnamePath": "/var/lib/docker/containers/0de8d14b63bc52239daea53b8e89b21445c8802df7cb6e652d95b5b5797a2ed1/hostname",
    "HostsPath": "/var/lib/docker/containers/0de8d14b63bc52239daea53b8e89b21445c8802df7cb6e652d95b5b5797a2ed1/hosts",
    "Id": "0de8d14b63bc52239daea53b8e89b21445c8802df7cb6e652d95b5b5797a2ed1",
    "Image": "04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2",
    "MountLabel": "",
    "Name": "/mesos-ae96f8cc-e297-4ccc-836f-3fb3c7698ca1",
    "NetworkSettings": {
        "Bridge": "",
        "Gateway": "",
        "IPAddress": "",
        "IPPrefixLen": 0,
        "MacAddress": "",
        "PortMapping": null,
        "Ports": null
    },
    "Path": "/bin/sh",
    "ProcessLabel": "",
    "ResolvConfPath": "/var/lib/docker/containers/0de8d14b63bc52239daea53b8e89b21445c8802df7cb6e652d95b5b5797a2ed1/resolv.conf",
    "State": {
        "ExitCode": 0,
        "FinishedAt": "0001-01-01T00:00:00Z",
        "Paused": false,
        "Pid": 24076,
        "Restarting": false,
        "Running": true,
        "StartedAt": "2015-02-25T14:41:33.725944916Z"
    },
    "Volumes": {
        "/mnt/mesos/sandbox": "/tmp/mesos/slaves/20150223-223304-117483712-5050-29395-S0/frameworks/20150225-174751-117483712-5050-13334-0011/executors/1/runs/ae96f8cc-e297-4ccc-836f-3fb3c7698ca1"
    },
    "VolumesRW": {
        "/mnt/mesos/sandbox": true
    }
}
#+END_SRC
